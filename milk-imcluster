#!/usr/bin/env bash

MSdescr="Cluster images from single FITS cuber"

MSextdescr="Cluster images

$(tput bold)EXAMPLES:$(tput sgr0)
	${pname} imc.fits

"


source milk-script-std-config


# prerequisites
#
RequiredCommands=()
RequiredFiles=()
RequiredDirs=()


# SCRIPT ARGUMENTS (mandatory)
# syntax: "name:type(s)/test(s):description"

MSarg+=( "fname:string:FITS file name" )
#MSarg+=( "xsize:int:x size" )
#MSarg+=( "ysize:int:y size" )
#MSarg+=( "outfile:string:output filename" )



# SCRIPT OPTIONS
# syntax: "short:long:functioncall:args[types]:description"

#MSopt+=( "a:archive:archivefunc::archive .conf files" )
#MSopt+=( "m:match:matchfunc:value[float]:check if value is match" )
#MSopt+=( "s:stress:stressfunc:nbcpu[int] timeout[float]:run stress test" )


# parse arguments
# provides functions:
# - checkFile, checkPipe, checkDir, cmdexists, checkCommand, printHELP
source milk-argparse

# pull paramters
fname="${inputMSargARRAY[0]}"
#xsize="${inputMSargARRAY[1]}"
#ysize="${inputMSargARRAY[2]}"




# Additional checks
# if failing, will set EXITSTATUS to 1


# checkFile "otherfileneeded.txt"
# checkDir "somedir"

#if [ $EXITSTATUS = 1 ]; then
#    exit
#fi



# clear output
rm -f ./clustout/*

# execute script commands

milk-all << EOF
mload milkclustering
clustering.cubeclust ..procinfo 1


loadfits "${fname}[*,*,1:2000]" imc
clustering.cubeclust .NBCFmax 4096

clustering.cubeclust .T 20000.0
clustering.cubeclust .leafposmode 0

#clustering.cubeclust .T 10000.0
#clustering.cubeclust .leafposmode 1

clustering.cubeclust .B 8
clustering.cubeclust .opt.rebuild OFF
clustering.cubeclust .opt.condense OFF
clustering.cubeclust ?
clustering.cubeclust imc clustout
listim
exitCLI
EOF



